// -- WARNING -- The code in this file has been generated by a tool. Do not edit it directly.

// TODO:
// 1. make it so we can generate individual traits rather than all of them

// NOTE: this requires all of the state structs to be imported by the root crate/module

use crate::*; // Import all of the public types exposed by this crate

// Aggregates

/// Colony Aggregate Required Trait
pub trait ColonyAggregate {
    // Commands
    fn handle_establish_colony(
        &self,
        input: EstablishColony,
        state: Option<ColonyAggregateState>,
    ) -> RpcResult<EventList>;

    // Events
    fn apply_colony_claimed(
        &self,
        input: ColonyClaimed,
        state: Option<ColonyAggregateState>,
    ) -> RpcResult<StateAck>;
}

/// Rover Aggregate Required Trait
pub trait RoverAggregate {
    // Commands
    fn handle_provision_rover(
        &self,
        input: ProvisionRover,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_set_destination(
        &self,
        input: SetDestination,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_stop(&self, input: Stop, state: Option<RoverAggregateState>) -> RpcResult<EventList>;
    fn handle_start(
        &self,
        input: Start,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_build_structure(
        &self,
        input: BuildStructure,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_cancel_construction(
        &self,
        input: CancelConstruction,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<EventList>;

    // Events
    fn apply_rover_initialized(
        &self,
        input: RoverInitialized,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_rover_destination_changed(
        &self,
        input: RoverDestinationChanged,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_rover_stopped(
        &self,
        input: RoverStopped,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_rover_started(
        &self,
        input: RoverStarted,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_construction_began(
        &self,
        input: ConstructionBegan,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_construction_cancelled(
        &self,
        input: ConstructionCancelled,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_construction_progressed(
        &self,
        input: ConstructionProgressed,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_resource_quantity_changed(
        &self,
        input: ResourceQuantityChanged,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_rover_position_changed(
        &self,
        input: RoverPositionChanged,
        state: Option<RoverAggregateState>,
    ) -> RpcResult<StateAck>;
}
