// -- WARNING -- The code in this file has been generated by a tool. Do not edit it directly.

// TODO:
// 1. make it so we can generate individual traits rather than all of them

// NOTE: this requires all of the state structs to be imported by the root crate/module

use crate::*; // Import all of the public types exposed by this crate

// Aggregates

/// Bankaccount Aggregate Required Trait
pub trait BankaccountAggregate {
    // Commands
    fn handle_create_account(
        &self,
        input: CreateAccount,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_reserve_funds(
        &self,
        input: ReserveFunds,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_release_reserved_funds(
        &self,
        input: ReleaseReservedFunds,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_withdraw_funds(
        &self,
        input: WithdrawFunds,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_deposit_funds(
        &self,
        input: DepositFunds,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_request_wire_transfer(
        &self,
        input: RequestWireTransfer,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_initiate_interbank_transfer(
        &self,
        input: InitiateInterbankTransfer,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<EventList>;
    fn handle_withdraw_reserved_funds(
        &self,
        input: WithdrawReservedFunds,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<EventList>;

    // Events
    fn apply_account_created(
        &self,
        input: AccountCreated,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_wire_funds_reserved(
        &self,
        input: WireFundsReserved,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_funds_withdrawn(
        &self,
        input: FundsWithdrawn,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_wire_funds_released(
        &self,
        input: WireFundsReleased,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_interbank_transfer_initiated(
        &self,
        input: InterbankTransferInitiated,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_wire_transfer_requested(
        &self,
        input: WireTransferRequested,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_funds_deposited(
        &self,
        input: FundsDeposited,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<StateAck>;
    fn apply_reserved_funds_withdrawn(
        &self,
        input: ReservedFundsWithdrawn,
        state: Option<BankaccountAggregateState>,
    ) -> RpcResult<StateAck>;
}

// Process Managers

/// Bankaccount Process Manager
pub trait BankaccountProcessManager {
    // Inputs
    fn handle_wire_transfer_requested(
        &self,
        input: WireTransferRequested,
        state: Option<BankaccountProcessManagerState>,
    ) -> RpcResult<ProcessManagerAck>;
    fn handle_wire_funds_reserved(
        &self,
        input: WireFundsReserved,
        state: Option<BankaccountProcessManagerState>,
    ) -> RpcResult<ProcessManagerAck>;
    fn handle_interbank_transfer_completed(
        &self,
        input: InterbankTransferCompleted,
        state: Option<BankaccountProcessManagerState>,
    ) -> RpcResult<ProcessManagerAck>;
    fn handle_interbank_transfer_failed(
        &self,
        input: InterbankTransferFailed,
        state: Option<BankaccountProcessManagerState>,
    ) -> RpcResult<ProcessManagerAck>;
    fn handle_interbank_transfer_initiated(
        &self,
        input: InterbankTransferInitiated,
        state: Option<BankaccountProcessManagerState>,
    ) -> RpcResult<ProcessManagerAck>;
}
