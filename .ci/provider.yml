trigger:
  branches:
    include:
      - 'main'
  tags:
    include:
      - 'concordance-provider-v*'
  paths:
    include:
      - 'interface/'
      - 'capability-provider/'
      - '.ci/provider.yml'
pr:
  branches:
    include:
      - 'main'
  paths:
    include:
      - 'interface/'
      - 'capability-provider/'
      - '.ci/provider.yml'

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: public-templates
      type: github
      endpoint: cosmonic
      name: cosmonic/ado-common

variables:
  - group: 'Common Rust Vars'
  - group: 'Cosmonic Release Keys'
  - name: working-directory
    value: ./capability-provider
  - name: WASH_ISSUER_KEY
    value: $[variables.COSMONIC_ACCOUNT_OFFICIAL]
  - name: WASH_SUBJECT_KEY
    value: $[variables.COSMONIC_CONCORDANCE_SUBJECT_KEY]
  - name: PUSH_USER
    value: $[variables.COSMONIC_AZURECR_PUSH_USER]
  - name: PUSH_PASSWORD
    value: $[variables.COSMONIC_AZURECR_PUSH_PASSWORD]

stages:
  - stage: build_and_check
    jobs:
      - job: build_and_check
        strategy:
          matrix:
            linux:
              vmImage: ubuntu-latest
            windows:
              vmImage: windows-latest
            macos:
              vmImage: macOS-latest
        pool:
          vmImage: $(vmImage)
        steps:
          - template: steps/rust-setup.yml@public-templates
            parameters:
              components:
                - clippy
                - rustfmt
          - template: steps/rust-caching.yml@public-templates
            parameters:
              projectName: concordance
              workingDirectory: $(working-directory)

          # No tests needed here as they are all integration tests. So just run a check and clippy
          - template: steps/rust-fmt-clippy.yml@public-templates
            parameters:
              workingDirectory: $(working-directory)

  - stage: release
    dependsOn:
      - build_and_check
    # Only do this stage if the ref is a tag and the previous stage succeeded
    #condition: and(succeeded('build_and_check'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    jobs:
      - job: release
        steps:
          - template: steps/install-wash.yml@public-templates
          - template: steps/rust-setup.yml@public-templates
          - template: steps/rust-caching.yml@public-templates
            parameters:
              projectName: concordance
              workingDirectory: $(working-directory)
              cacheTarget: false

          - bash: cargo install --git https://github.com/brooksmtownsend/cross --branch add-darwin-target --force
            displayName: Install Cross

          - bash: |
              mkdir -p ${HOME}/.cache
              #              make par-full
              wash reg pull wasmcloud.azurecr.io/httpserver:0.17.0 --destination build/concordance.par.gz
            workingDirectory: $(working-directory)
            displayName: Build provider archive
            env:
              WASH_ISSUER_KEY: $(WASH_ISSUER_KEY)
              WASH_SUBJECT_KEY: $(WASH_SUBJECT_KEY)
              XDG_CACHE_HOME: ${HOME}/.cache
              REPOSITORY_PATH: $(Build.Repository.LocalPath)

          - bash: |
              echo "##vso[task.setvariable variable=oci-repository]$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[].name')"
              echo "##vso[task.setvariable variable=oci-version]$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[].version')"
            displayName: Determine artifact metadata
            workingDirectory: $(working-directory)

          - template: steps/oci-release.yml@public-templates
            parameters:
              artifactPath: $(working-directory)/build/$(oci-repository).par.gz
              ociUrl: cosmonic.azurecr.io
              ociRepository: $(oci-repository)
              ociVersion: $(oci-version)
              ociUsername: $(PUSH_USER)
              ociPassword: $(PUSH_PASSWORD)
