// TODO: unhardcode this
use concordance_gen::eventsourcing::*;

use wasmcloud_interface_logging as walog;

use wasmbus_rpc::actor::prelude::*;

#[derive(Debug, Default, Actor, HealthResponder)]
#[services(Actor, {{impltype}}Service)]
pub(crate) struct {{traitname}}{{impltype}}Impl {}

{{#each summary.inbound_events as |input|}}
impl {{input.name}} {
    pub const TYPE: &'static str = "{{method-name input.name}}";
} 
{{/each}}

{{#each summary.inbound_commands as |input|}}
impl {{input.name}} {
    pub const TYPE: &'static str = "{{method-name input.name}}";
} 
{{/each}}

#[async_trait]
impl {{impltype}}Service for {{traitname}}{{impltype}}Impl {
    async fn handle_command(&self, _ctx: &Context, arg: &StatefulCommand) -> RpcResult<EventList> {
        {{#if summary.inbound_commands}}
          let state: Option<{{traitname}}{{impltype}}State> = arg
            .state
            .clone()
            .map(|bytes| deserialize_json(&bytes).unwrap_or_default());

        match arg.command_type.as_str() {
             {{#each summary.inbound_commands as |input|}}
                {{input.name}}::TYPE => {
                    {{../traitname}}{{../impltype}}::handle_{{method-name input.name}}(
                        self,
                        deserialize_json(&arg.payload)?,                        
                        state
                    ).map_err(|e| RpcError::ActorHandler(e.to_string()))                   
                },
                
             {{/each}}                           
            e => {
                walog::error!("Unsupported command type: {e}. Interest configuration for this {{impltype}} is probably incorect.");
                Ok(vec![])
            }
        }
        {{else}}
        Ok(vec![])
        {{/if}}
    }

    async fn apply_event(&self, _ctx: &Context, arg: &EventWithState) -> RpcResult<StateAck> {
        let state: Option<{{traitname}}{{impltype}}State> = arg
         .state
         .clone()
         .map(|bytes| deserialize_json(&bytes).unwrap_or_default());

        Ok(match arg.event.event_type.as_str() {
            {{#each summary.inbound_events as |input|}}
            {{input.name}}::TYPE => {
                {{../traitname}}{{../impltype}}::apply_{{method-name input.name}}(
                    self,
                    deserialize_json(&arg.event.payload)?,                    
                    state).map_err(|e| RpcError::ActorHandler(e.to_string()))?
                },
            {{/each}}
            e =>   {
                walog::debug!("Non-state-mutating event received '{e}'. Acking and moving on.");
                 StateAck {
                    succeeded: true,
                    error: None,
                    state: state
                        .clone()
                        .map(|s| serde_json::to_vec(&s).unwrap_or_default()),
                }
            }
        })        
    }
}


fn deserialize_json<'de, T: Deserialize<'de>>(
    buf: &'de [u8],
) -> RpcResult<T> {
    serde_json::from_slice(buf).map_err(|e| format!("Deserialization failure: {e:?}").into())
}

fn serialize_json<T: Serialize>(data: &T) -> RpcResult<Vec<u8>> {
    serde_json::to_vec(data).map_err(|e| format!("Serialization failure: {e:?}").into())
}
