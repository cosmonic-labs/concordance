use concordance_gen::eventsourcing::*;

use wasmcloud_interface_logging as walog;

use wasmbus_rpc::actor::prelude::*;

// One-way event handler implementation for {{impltype}}.{{traitname}}



{{#each summary.inbound as |input|}}
impl {{input.name}} {
    pub const TYPE: &'static str = "{{method-name input.name}}";
} 
{{/each}}

/// {{title-case rootname}} {{impltype}}
#[async_trait]
pub trait {{traitname}}{{impltype}} {

    {{#each summary.inbound}}
    async fn handle_{{method-name name}}(&self, input: {{name}}) -> anyhow::Result<()>;
    {{/each}}    
}

#[derive(Debug, Default, Actor, HealthResponder)]
#[services(Actor, StatelessEventHandlerService)]
pub(crate) struct {{traitname}}{{impltype}}Impl {}

#[async_trait]
impl StatelessEventHandlerService for {{traitname}}{{impltype}}Impl {        
    async fn apply_stateless_event(&self, _ctx: &Context, arg: &Event) -> RpcResult<StatelessAck> {        

        Ok(match arg.event_type.as_str() {
            {{#each summary.inbound as |input|}}
            {{input.name}}::TYPE => {
                let res = {{../traitname}}{{../impltype}}::handle_{{method-name input.name}}(
                    self,
                    deserialize_json(&arg.payload)?,                    
                ).await;
                 match res {
                    Ok(_) => StatelessAck::ok(),
                    Err(e) => StatelessAck::error(e.to_string()),
                }
            },
            {{/each}}
            e =>   {
                walog::debug!("Unexpected event received '{e}'. Acking and moving on.");
                StatelessAck::ok()
            }
        })        
    }
}

fn deserialize_json<'de, T: Deserialize<'de>>(
    buf: &'de [u8],
) -> RpcResult<T> {
    serde_json::from_slice(buf).map_err(|e| format!("Deserialization failure: {e:?}").into())
}

fn serialize_json<T: Serialize>(data: &T) -> RpcResult<Vec<u8>> {
    serde_json::to_vec(data).map_err(|e| format!("Serialization failure: {e:?}").into())
}


